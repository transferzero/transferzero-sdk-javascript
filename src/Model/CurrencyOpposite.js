/**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import CurrencyOppositeAllOf from './CurrencyOppositeAllOf';

/**
 * The CurrencyOpposite model module.
 * @module Model/CurrencyOpposite
 * @version 1.35.0
 */
class CurrencyOpposite {
    /**
     * Constructs a new <code>CurrencyOpposite</code>.
     * @alias module:Model/CurrencyOpposite
     * @implements module:Model/Currency
     * @implements module:Model/CurrencyOppositeAllOf
     */
    constructor() { 
        Currency.initialize(this);CurrencyOppositeAllOf.initialize(this);
        CurrencyOpposite.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CurrencyOpposite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Model/CurrencyOpposite} obj Optional instance to populate.
     * @return {module:Model/CurrencyOpposite} The populated <code>CurrencyOpposite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrencyOpposite();
            Currency.constructFromObject(data, obj);
            CurrencyOppositeAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('decimals')) {
                obj['decimals'] = ApiClient.convertToType(data['decimals'], 'Number');
            }
            if (data.hasOwnProperty('subunit_to_unit')) {
                obj['subunit_to_unit'] = ApiClient.convertToType(data['subunit_to_unit'], 'String');
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = ApiClient.convertToType(data['min'], 'String');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'String');
            }
            if (data.hasOwnProperty('usd_equivalent')) {
                obj['usd_equivalent'] = ApiClient.convertToType(data['usd_equivalent'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('mtm_rate')) {
                obj['mtm_rate'] = ApiClient.convertToType(data['mtm_rate'], 'Number');
            }
            if (data.hasOwnProperty('margin')) {
                obj['margin'] = ApiClient.convertToType(data['margin'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The currency code in 3-character alpha ISO 4217 currency format
 * @member {String} code
 */
CurrencyOpposite.prototype['code'] = undefined;

/**
 * Name of currency
 * @member {String} name
 */
CurrencyOpposite.prototype['name'] = undefined;

/**
 * Symbol of currency
 * @member {String} symbol
 */
CurrencyOpposite.prototype['symbol'] = undefined;

/**
 * Number of decimal points
 * @member {Number} decimals
 */
CurrencyOpposite.prototype['decimals'] = undefined;

/**
 * Subunits in Unit (eg. there are 100 cents in 1 US Dollar)
 * @member {String} subunit_to_unit
 */
CurrencyOpposite.prototype['subunit_to_unit'] = undefined;

/**
 * Is this a primary currency?
 * @member {Boolean} primary
 */
CurrencyOpposite.prototype['primary'] = undefined;

/**
 * The minimum amount allowed in a transaction
 * @member {String} min
 */
CurrencyOpposite.prototype['min'] = undefined;

/**
 * The maximum amount allowed in a transaction
 * @member {String} max
 */
CurrencyOpposite.prototype['max'] = undefined;

/**
 * The equivalent of the currency to 1 USD
 * @member {String} usd_equivalent
 */
CurrencyOpposite.prototype['usd_equivalent'] = undefined;

/**
 * The rate of this particular currency with the base one
 * @member {Number} rate
 */
CurrencyOpposite.prototype['rate'] = undefined;

/**
 * Mark to market rate of this particular currency against the base one with the margin factored in
 * @member {Number} mtm_rate
 */
CurrencyOpposite.prototype['mtm_rate'] = undefined;

/**
 * The margin set for transactions of this particular currency with the base one
 * @member {String} margin
 */
CurrencyOpposite.prototype['margin'] = undefined;


// Implement Currency interface:
/**
 * The currency code in 3-character alpha ISO 4217 currency format
 * @member {String} code
 */
Currency.prototype['code'] = undefined;
/**
 * Name of currency
 * @member {String} name
 */
Currency.prototype['name'] = undefined;
/**
 * Symbol of currency
 * @member {String} symbol
 */
Currency.prototype['symbol'] = undefined;
/**
 * Number of decimal points
 * @member {Number} decimals
 */
Currency.prototype['decimals'] = undefined;
/**
 * Subunits in Unit (eg. there are 100 cents in 1 US Dollar)
 * @member {String} subunit_to_unit
 */
Currency.prototype['subunit_to_unit'] = undefined;
/**
 * Is this a primary currency?
 * @member {Boolean} primary
 */
Currency.prototype['primary'] = undefined;
/**
 * The minimum amount allowed in a transaction
 * @member {String} min
 */
Currency.prototype['min'] = undefined;
/**
 * The maximum amount allowed in a transaction
 * @member {String} max
 */
Currency.prototype['max'] = undefined;
/**
 * The equivalent of the currency to 1 USD
 * @member {String} usd_equivalent
 */
Currency.prototype['usd_equivalent'] = undefined;
// Implement CurrencyOppositeAllOf interface:
/**
 * The rate of this particular currency with the base one
 * @member {Number} rate
 */
CurrencyOppositeAllOf.prototype['rate'] = undefined;
/**
 * Mark to market rate of this particular currency against the base one with the margin factored in
 * @member {Number} mtm_rate
 */
CurrencyOppositeAllOf.prototype['mtm_rate'] = undefined;
/**
 * The margin set for transactions of this particular currency with the base one
 * @member {String} margin
 */
CurrencyOppositeAllOf.prototype['margin'] = undefined;




export default CurrencyOpposite;


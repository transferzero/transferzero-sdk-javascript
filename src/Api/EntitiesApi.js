/**
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityCreateRequest from '../Model/EntityCreateRequest';
import EntityCreateResponse from '../Model/EntityCreateResponse';
import EntityListResponse from '../Model/EntityListResponse';
import EntityUpdateRequest from '../Model/EntityUpdateRequest';
import EntityUpdateResponse from '../Model/EntityUpdateResponse';

/**
* Entities service.
* @module Api/EntitiesApi
* @version 1.25.0
*/
export default class EntitiesApi {

    /**
    * Constructs a new EntitiesApi. 
    * @alias module:Api/EntitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Listing entities
     * Get a list of entities
     * @param {String} entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
     * @param {Array.<String>} ids Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EntityListResponse} and HTTP response
     */
    getEntitiesWithHttpInfo(entityType, ids) {
      let postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getEntities");
      }

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getEntities");
      }


      let pathParams = {
        'Entity Type': entityType
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityListResponse;

      return this.apiClient.callApi(
        '/risk_assessment/entities/{Entity Type}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Listing entities
     * Get a list of entities
     * @param {String} entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
     * @param {Array.<String>} ids Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EntityListResponse}
     */
    getEntities(entityType, ids) {
      return this.getEntitiesWithHttpInfo(entityType, ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Listing entities by params (rating and/or state)
     * Get a list of entities scoped by the requested params (rating and/or state)
     * @param {String} entityType Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.rating Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60;
     * @param {String} opts.state Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EntityListResponse} and HTTP response
     */
    getEntitiesByParamsWithHttpInfo(entityType, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getEntitiesByParams");
      }


      let pathParams = {
        'Entity Type': entityType
      };
      let queryParams = {
        'rating': opts['rating'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityListResponse;

      return this.apiClient.callApi(
        '/risk_assessment/entities/{Entity Type}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Listing entities by params (rating and/or state)
     * Get a list of entities scoped by the requested params (rating and/or state)
     * @param {String} entityType Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.rating Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60;
     * @param {String} opts.state Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EntityListResponse}
     */
    getEntitiesByParams(entityType, opts) {
      return this.getEntitiesByParamsWithHttpInfo(entityType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetching a entity
     * Returns a single entity by the Entity ID
     * @param {String} entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @param {String} entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EntityCreateResponse} and HTTP response
     */
    getEntityWithHttpInfo(entityType, entityID) {
      let postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getEntity");
      }

      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntity");
      }


      let pathParams = {
        'Entity Type': entityType,
        'Entity ID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityCreateResponse;

      return this.apiClient.callApi(
        '/risk_assessment/entities/{Entity Type}/{Entity ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetching a entity
     * Returns a single entity by the Entity ID
     * @param {String} entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @param {String} entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EntityCreateResponse}
     */
    getEntity(entityType, entityID) {
      return this.getEntityWithHttpInfo(entityType, entityID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updating an entity
     * Updates a single entity by the Entity ID
     * @param {String} entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @param {String} entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @param {module:Model/EntityUpdateRequest} entityUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EntityUpdateResponse} and HTTP response
     */
    patchEntityWithHttpInfo(entityType, entityID, entityUpdateRequest) {
      let postBody = entityUpdateRequest;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling patchEntity");
      }

      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling patchEntity");
      }

      // verify the required parameter 'entityUpdateRequest' is set
      if (entityUpdateRequest === undefined || entityUpdateRequest === null) {
        throw new Error("Missing the required parameter 'entityUpdateRequest' when calling patchEntity");
      }


      let pathParams = {
        'Entity Type': entityType,
        'Entity ID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityUpdateResponse;

      return this.apiClient.callApi(
        '/risk_assessment/entities/{Entity Type}/{Entity ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updating an entity
     * Updates a single entity by the Entity ID
     * @param {String} entityType Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @param {String} entityID ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @param {module:Model/EntityUpdateRequest} entityUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EntityUpdateResponse}
     */
    patchEntity(entityType, entityID, entityUpdateRequest) {
      return this.patchEntityWithHttpInfo(entityType, entityID, entityUpdateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creating an entity
     * Creates a new entity. 
     * @param {String} entityType Type of entity to create.
     * @param {String} entityID ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;
     * @param {module:Model/EntityCreateRequest} entityCreateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EntityCreateResponse} and HTTP response
     */
    postEntityWithHttpInfo(entityType, entityID, entityCreateRequest) {
      let postBody = entityCreateRequest;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling postEntity");
      }

      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling postEntity");
      }

      // verify the required parameter 'entityCreateRequest' is set
      if (entityCreateRequest === undefined || entityCreateRequest === null) {
        throw new Error("Missing the required parameter 'entityCreateRequest' when calling postEntity");
      }


      let pathParams = {
        'Entity Type': entityType,
        'Entity ID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityCreateResponse;

      return this.apiClient.callApi(
        '/risk_assessment/entities/{Entity Type}/{Entity ID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creating an entity
     * Creates a new entity. 
     * @param {String} entityType Type of entity to create.
     * @param {String} entityID ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;
     * @param {module:Model/EntityCreateRequest} entityCreateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EntityCreateResponse}
     */
    postEntity(entityType, entityID, entityCreateRequest) {
      return this.postEntityWithHttpInfo(entityType, entityID, entityCreateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

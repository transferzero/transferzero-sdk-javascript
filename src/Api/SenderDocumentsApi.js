/**
 * BitPesa Private API
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentListResponse from '../Model/DocumentListResponse';
import DocumentResponse from '../Model/DocumentResponse';

/**
* SenderDocuments service.
* @module Api/SenderDocumentsApi
* @version 1.25.0
*/
export default class SenderDocumentsApi {

    /**
    * Constructs a new SenderDocumentsApi. 
    * @alias module:Api/SenderDocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adding a document to a sender
     * Adds a new document to a sender 
     * @param {String} senderID ID of the sender to add the document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
     * @param {String} documentID The ID of the document to be added to the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentResponse} and HTTP response
     */
    addDocumentSenderWithHttpInfo(senderID, documentID) {
      let postBody = null;

      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling addDocumentSender");
      }

      // verify the required parameter 'documentID' is set
      if (documentID === undefined || documentID === null) {
        throw new Error("Missing the required parameter 'documentID' when calling addDocumentSender");
      }


      let pathParams = {
        'Sender ID': senderID,
        'Document ID': documentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;

      return this.apiClient.callApi(
        '/senders/{Sender ID}/documents/{Document ID}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adding a document to a sender
     * Adds a new document to a sender 
     * @param {String} senderID ID of the sender to add the document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
     * @param {String} documentID The ID of the document to be added to the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentResponse}
     */
    addDocumentSender(senderID, documentID) {
      return this.addDocumentSenderWithHttpInfo(senderID, documentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetching a document belonging to a sender
     * Returns a single document belonging to a sender by the Document ID
     * @param {String} senderID ID of the sender who owns the requested document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
     * @param {String} documentID ID of the document to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentResponse} and HTTP response
     */
    getSenderDocumentWithHttpInfo(senderID, documentID) {
      let postBody = null;

      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling getSenderDocument");
      }

      // verify the required parameter 'documentID' is set
      if (documentID === undefined || documentID === null) {
        throw new Error("Missing the required parameter 'documentID' when calling getSenderDocument");
      }


      let pathParams = {
        'Sender ID': senderID,
        'Document ID': documentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;

      return this.apiClient.callApi(
        '/senders/{Sender ID}/documents/{Document ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetching a document belonging to a sender
     * Returns a single document belonging to a sender by the Document ID
     * @param {String} senderID ID of the sender who owns the requested document.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
     * @param {String} documentID ID of the document to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentResponse}
     */
    getSenderDocument(senderID, documentID) {
      return this.getSenderDocumentWithHttpInfo(senderID, documentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Getting a list of documents belonging to a sender
     * Fetches a list of documents belonging to a sender.
     * @param {String} senderID ID of the sender who owns the requested documents.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentListResponse} and HTTP response
     */
    getSenderDocumentsWithHttpInfo(senderID, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling getSenderDocuments");
      }


      let pathParams = {
        'Sender ID': senderID
      };
      let queryParams = {
        'page': opts['page'],
        'per': opts['per']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentListResponse;

      return this.apiClient.callApi(
        '/senders/{Sender ID}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Getting a list of documents belonging to a sender
     * Fetches a list of documents belonging to a sender.
     * @param {String} senderID ID of the sender who owns the requested documents.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentListResponse}
     */
    getSenderDocuments(senderID, opts) {
      return this.getSenderDocumentsWithHttpInfo(senderID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removing a document from a sender
     * Removes a document from a sender 
     * @param {String} senderID ID of the sender with the document to remove.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60;
     * @param {String} documentID The ID of the document to be removed from the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentResponse} and HTTP response
     */
    removeDocumentSenderWithHttpInfo(senderID, documentID) {
      let postBody = null;

      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling removeDocumentSender");
      }

      // verify the required parameter 'documentID' is set
      if (documentID === undefined || documentID === null) {
        throw new Error("Missing the required parameter 'documentID' when calling removeDocumentSender");
      }


      let pathParams = {
        'Sender ID': senderID,
        'Document ID': documentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;

      return this.apiClient.callApi(
        '/senders/{Sender ID}/documents/{Document ID}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removing a document from a sender
     * Removes a document from a sender 
     * @param {String} senderID ID of the sender with the document to remove.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60;
     * @param {String} documentID The ID of the document to be removed from the sender.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/remove&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentResponse}
     */
    removeDocumentSender(senderID, documentID) {
      return this.removeDocumentSenderWithHttpInfo(senderID, documentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
